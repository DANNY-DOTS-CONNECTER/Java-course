@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + FlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# axHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
 }

abstract class AbstractBullet
{
    - power:int
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

abstract class AbstractBoosterPacks
{
    + bonus():void
    + AbstractBoosterPacks(int locationX, int locationY)
    + forward():void
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractBullet
AbstractFlyingObject <|-- AbstractBoosterPacks

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy

AbstractBullet <|-- HeroBullet
AbstractBullet <|-- EnemyBullet

AbstractBoosterPacks <|-- PropBlood
AbstractBoosterPacks <|-- PropBullet
AbstractBoosterPacks <|-- PropBomb

BossEnemyFactory ..> BossEnemy: create
EliteEnemyFactory ..> EliteEnemy : create
MobEnemyFactory ..> MobEnemy : create

PropBulletFactory ..> PropBullet : create
PropBloodFactory ..> PropBlood : create
PropBombFactory ..> PropBomb : create

interface EnemyFactory
{
    {abstract}createOperation():AbstractAircraft
}

class MobEnemyFactory implements EnemyFactory
{
    + CreateMobEnemy():AbstractAircraft
}

class EliteEnemyFactory implements EnemyFactory{
    + CreateEliteEnemy():AbstractAircraft
}

class BossEnemyFactory implements EnemyFactory{
    + CreateBossEnemy():AbstractAircraft
}



class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} instance:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance():HeroAircraft
    + forward():void
    + shoot():List<Bullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}

class EliteEnemy{
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<Bullet>
    + forward():void
}

class BossEnemy{
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<Bullet>
    + forward():void
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

interface PropFactory{
    {abstract} createOperation():AbstractBoosterPacks
}

class PropBombFactory implements PropFactory{
    + createPropBomb():AbstractBoosterPacks
}

class PropBloodFactory implements PropFactory{
    + createPropBlood():AbstractBoosterPacks
}

class PropBulletFactory implements PropFactory{
    + createPropBullet():AbstractBoosterPacks
}

class PropBlood{
    + PropBlood(int locationX, int locationY)
}

class PropBomb{
    + PropBomb(int locationX, int locationY)
}

class PropBullet{
    + PropBullet(int locationX, int locationY)
}

@enduml